(set-logic QF_NRA_ODE)
(declare-fun v () Real [-1e+07, 1e+07])
(declare-fun u () Real [-1e+11, 1e+11])
(declare-fun lt () Real [0.000000, 0.036])
(declare-fun gt () Real [0.000000, 100])
(declare-fun state_v_0 () Real [-1e+07, 1e+07] )
(declare-fun next_u_0 () Real [-1e+11, 1e+11] )
(declare-fun v_0_0 () Real [-1e+07, 1e+07])
(declare-fun v_0_t () Real [-1e+07, 1e+07])
(declare-fun u_0_0 () Real [-1e+11, 1e+11])
(declare-fun u_0_t () Real [-1e+11, 1e+11])
(declare-fun lt_0_0 () Real [0.000000, 0.02])
(declare-fun lt_0_t () Real [0.000000, 0.02])
(declare-fun gt_0_0 () Real [0.000000, 100])
(declare-fun gt_0_t () Real [0.000000, 100])
(declare-fun time_0 () Real [0.000000, 0])
(declare-fun mode_0 () Real [1.000000, 1.000000])
(declare-fun Noise__-1 () Real [0, 0])
(declare-fun state_v_1 () Real [-1e+07, 1e+07] )
(declare-fun next_u_1 () Real [-1e+11, 1e+11] )
(declare-fun v_1_0 () Real [-1e+07, 1e+07])
(declare-fun v_1_t () Real [-1e+07, 1e+07])
(declare-fun u_1_0 () Real [-1e+11, 1e+11])
(declare-fun u_1_t () Real [-1e+11, 1e+11])
(declare-fun lt_1_0 () Real [0.000000, 0.036])
(declare-fun lt_1_t () Real [0.000000, 0.036])
(declare-fun gt_1_0 () Real [0.000000, 100])
(declare-fun gt_1_t () Real [0.000000, 100])
(declare-fun time_1 () Real [0.000000, 0.036])
(declare-fun mode_1 () Real [1.000000, 1.000000])
(define-ode flow_1 ((= d/dt[gt] 1) (= d/dt[lt] 1) (= d/dt[v] (+(*(/(- 50) 1000) v)(*(/ 1 1000) u))) (= d/dt[u] 0)))
(assert (and (= lt_0_0 0) (= gt_0_0 0) (>= u_0_0 498 )(<= u_0_0 500 )(>= v_0_0 79 )(<= v_0_0 81 )(= mode_0 1)  
 (= lt_0_t (+ lt_0_0 (* 1 0))) (= gt_0_t (+ gt_0_0 (* 1 0))) (= u_0_t (+ u_0_0 (* 0 0))) 
 (= [gt_0_t lt_0_t v_0_t u_0_t ] (integral 0. time_0 [gt_0_0 lt_0_0 v_0_0 u_0_0 ] flow_1))  
 (= mode_1 1) (= lt_0_t 0) (= gt_1_0 gt_0_t) (= lt_1_0 0)  
 (= v_1_0 v_0_t)(= state_v_0 v_0_t )  
 (= next_u_1 (- 10 (* (+ state_v_0 -10 ) 56260 ) ) ) 
  
 (= next_u_1 u_1_0 )  
 (= lt_1_t (+ lt_1_0 (* 1 time_1 ))) (= gt_1_t (+ gt_1_0 (* 1 time_1 ))) (= u_1_t (+ u_1_0 (* 0 time_1 ))) 
 (= [gt_1_t lt_1_t v_1_t u_1_t ] (integral 0. time_1 [gt_1_0 lt_1_0 v_1_0 u_1_0 ] flow_1))  
 (forall_t 1 [0 time_1] (<= lt_1_t 0.036))   
 (<= lt_1_t 0.036) (<= lt_1_0 0.036) (= mode_1 1)  
 (>= gt_1_t 0.16  ) ))
 (check-sat)
(exit)